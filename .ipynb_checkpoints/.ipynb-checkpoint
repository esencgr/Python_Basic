{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## INPUT & OUTPUT \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "### *Output Formatting*  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ResultS of the 2020 Referendum..\n"
     ]
    }
   ],
   "source": [
    "year = 2020\n",
    "event = \"Referendum\"\n",
    "\n",
    "print(f'Results of the {year} {event}..')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "number of yes : 42572654 \n",
      "percentage of yes : 49.42%\n",
      "number of no :  43572980 percentage of no : 50.58%\n"
     ]
    }
   ],
   "source": [
    "yes = 42_572_654\n",
    "no = 43_572_980\n",
    "percent = yes / (yes + no)\n",
    "\n",
    "print(f'number of yes : {yes:-1} \\npercentage of yes : {percent:2.2%}')\n",
    "print('number of no :{:-10} percentage of no : {:2.2%}'.format(no, no / (yes + no)))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* When you donâ€™t need fancy output but just want a quick display of some variables for debugging purposes, you can convert any value to a string with the **repr()** or **str()** functions."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "'Hello world'\n",
      "'0.14285714285714285'\n",
      "the val of x is 32.5 and y is 40000\n",
      "'hello\\n'\n",
      "(32.5, 40000, ('spam', 'eggs'))\n"
     ]
    }
   ],
   "source": [
    "s = 'Hello world'\n",
    "print(repr(s))\n",
    "\n",
    "d = str(1/7)\n",
    "print(repr(d))\n",
    "\n",
    "x = 10 * 3.25\n",
    "y = 200 * 200\n",
    "s = \"the val of x is \" + repr(x) + \" and y is \" + repr(y)\n",
    "print(s)\n",
    "\n",
    "# The repr() of a string adds string quotes and backslashes:\n",
    "hello = 'hello\\n'\n",
    "hello = repr(hello)\n",
    "print(hello)\n",
    "\n",
    "# The argument to repr() may be any Python object:\n",
    "obj = (x, y ,('spam', 'eggs'))\n",
    "print(repr(obj))\n",
    "\n",
    "\n",
    "# if you need some help about repr --> print(help(repr))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###  *Formatted String*"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* Formatted string literals (also called f-strings for short) let you include the value of Python expressions inside a string by prefixing the string with **f** or **F** and writing expressions as **{expression}**.\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* The following example rounds pi to three places after the decimal and 4 places before int integer :"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The value of pi is approximately 3.1416\n"
     ]
    }
   ],
   "source": [
    "import math\n",
    "print(f'The value of pi is approximately {math.pi:4.3f}')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* Passing an integer after the **':'** will cause that field to be a minimum number of characters wide. This is useful for making **columns line up.**\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "john       -->      21384\n",
      "jack       -->      43583\n",
      "dcab       -->      23287\n"
     ]
    }
   ],
   "source": [
    "table = {\"john\": 21384, \"jack\": 43583, \"dcab\":23287 }\n",
    "for name, phone in table.items():\n",
    "    print(f'{name:10} --> {phone:10d}')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* Other modifiers can be used to convert the value before it is formatted. **'!a'** applies **ascii()**, **'!s'** applies **str()**, and **'!r'** applies **repr()**:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "my number is 2\n",
      "my number is 2\n"
     ]
    }
   ],
   "source": [
    "number = 2\n",
    "print(f'my number is {number:x}')\n",
    "print(f'my number is {ascii(number)}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### *The String format() Method*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### *Manuel String Formatting*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### *Old String Formatting*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##  FILES\n",
    "\n",
    "\n",
    "### *Reading & Writing*"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### *Methods of File Objects*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
